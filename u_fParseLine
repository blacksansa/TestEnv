     1 #include "protheus.ch"
     2
     3 // Forward declaration for the helper functions
     4 Static Function IsSize(cWord)
     5 Static Function _StrTok(cString, cDelimiter, @aTokens)
     6 Static Function IsNumeric(cValue)
     7
     8 //-------------------------------------------------------------------
     9 /*/{Protheus.doc} u_fParseLine
    10 Parse a line from the text file and extracts the data, including size.
    11
    12 @param cLine The line to be parsed.
    13 @return aData An array with the extracted data: {cCode1, cDesc, cSize, cCode2, nNumber}
    14
    15 @author Gemini
    16 @version 2.0
    17 @date 10/09/2025
    18 /*/
    19 //-------------------------------------------------------------------
    20 User Function u_fParseLine(cLine)
    21     Local aData := {}
    22     Local cCode1 := ""
    23     Local cDesc := ""
    24     Local cSize := ""
    25     Local cCode2 := ""
    26     Local nNumber := 0
    27     Local nLastSpace := 0
    28     Local cPossibleCode := ""
    29     Local cTempDesc := ""
    30     Local aWords := {}
    31     Local i := 0
    32
    33     // Check if the line has the minimum expected length
    34     If Len(RTrim(cLine)) > 25
    35         // The first 10 characters are the first code
    36         cCode1 := SubStr(cLine, 1, 10)
    37
    38         // The last 15 characters are a numeric value
    39         nNumber := Val(SubStr(RTrim(cLine), Len(RTrim(cLine)) - 14, 15))
    40
    41         // The string in between is the description, which might contain other codes
    42         cTempDesc := Trim(SubStr(cLine, 11, Len(RTrim(cLine)) - 25))
    43
    44         // Check for a second code at the end of the description
    45         nLastSpace := RAt(" ", cTempDesc)
    46         If nLastSpace > 0
    47             cPossibleCode := SubStr(cTempDesc, nLastSpace + 1)
    48             If IsNumeric(cPossibleCode)
    49                 cCode2 := cPossibleCode
    50                 cTempDesc := Trim(SubStr(cTempDesc, 1, nLastSpace - 1))
    51             EndIf
    52         EndIf
    53
    54         cDesc := cTempDesc
    55
    56         // Extract size from the description
    57         _StrTok(cDesc, " ", @aWords)
    58         For i := 1 to Len(aWords)
    59             If IsSize(aWords[i])
    60                 cSize := aWords[i]
    61                 // Remove the size from the description
    62                 cDesc := Trim(StrTran(cDesc, cSize, ""))
    63                 // Clean up potential double spaces left by StrTran
    64                 While At("  ", cDesc) > 0
    65                     cDesc := StrTran(cDesc, "  ", " ")
    66                 EndWhile
    67                 Exit
    68             EndIf
    69         Next
    70
    71         aData := {cCode1, cDesc, cSize, cCode2, nNumber}
    72     Else
    73         // Handle lines that are shorter than expected
    74         aData := {"", "", "", "", 0}
    75     EndIf
    76
    77 Return aData
    78
    79 /*
    80 * Helper function to check if a string represents a size (e.g., "10x20" or "10x20x30").
    81 */
    82 Static Function IsSize(cWord)
    83     Local aParts := {}
    84     Local i := 0
    85     Local lIsSize := .T.
    86
    87     // Size must contain 'x'
    88     If At("x", Lower(cWord)) == 0
    89         Return .F.
    90     EndIf
    91
    92     _StrTok(Lower(cWord), "x", @aParts)
    93
    94     If Len(aParts) < 2 .OR. Len(aParts) > 3
    95         Return .F.
    96     EndIf
    97
    98     For i := 1 to Len(aParts)
    99         // Check if each part is a number
   100         If ValType(aParts[i]) != 'N'
   101             lIsSize := .F.
   102             Exit
   103         EndIf
   104     Next
   105
   106     Return lIsSize
   107 End Function
   108
   109 /*
   110 * Helper function to tokenize a string.
   111 */
   112 Static Function _StrTok(cString, cDelimiter, aTokens)
   113     Local nPos := 1
   114     Local nAt := 0
   115     aTokens := {}
   116     While nPos <= Len(cString)
   117         nAt := At(cDelimiter, SubStr(cString, nPos))
   118         If nAt == 0
   119             AAdd(aTokens, SubStr(cString, nPos))
   120             Exit
   121         EndIf
   122         AAdd(aTokens, SubStr(cString, nPos, nAt - 1))
   123         nPos += nAt
   124     EndWhile
   125 Return
   126
   127 /*
   128 * Helper function to check if a string can be converted to a number (including decimals).
   129 */
   130 Static Function IsNumeric(cValue)
   131     Local lIsNumeric := .T.
   132     Local i := 0
   133     For i := 1 To Len(cValue)
   134         If !(SubStr(cValue, i, 1) >= "0" .And. SubStr(cValue, i, 1) <= "9" .Or. SubStr(cValue, i, 1) == ".")
   135             lIsNumeric := .F.
   136             Exit
   137         EndIf
   138     Next i
   139 Return lIsNumeric
