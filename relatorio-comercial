Com certeza. Abaixo está um resumo das operações realizadas na tabela PREDA1030 (DA1), formatado para análise.

Resumo das Operações na Tabela PREDA1030 (DA1)

A tabela PREDA1030, também conhecida como DA1, é a base para o gerenciamento de preços de produtos. As operações realizadas nessa tabela seguem dois fluxos principais, dependendo se o objetivo é congelar ou calcular os preços.

1. Fluxo de Congelamento de Preços

Este fluxo é ativado quando a intenção é copiar os preços da semana anterior para a semana atual, sem recalculá-los.

    Deleção: Registros de preço da semana atual são excluídos.

    Cópia: Registros de preço da última movimentação da semana anterior são copiados para a semana atual. Os campos de data e hora são atualizados.

    Finalidade: Garantir que os preços da semana anterior sejam mantidos para a semana de referência, "congelando-os".

2. Fluxo de Cálculo de Preços

Este fluxo é ativado para calcular novos preços com base nos custos de produção e nas regras de margem de lucro (markup).

    Deleção: Registros de preço da semana atual são excluídos.

    Cálculo: Para cada produto, o sistema executa a função ORTP169C para calcular o custo de produção. Esse cálculo é feito pela soma do custo de todos os materiais e componentes, com um ajuste de 5% de quebra.

    Markup: Com o custo em mãos, o preço de venda é calculado multiplicando o custo pelo markup definido para o produto.

    Inserção: Os novos registros, contendo o custo de produção e o preço de venda calculados, são inseridos na tabela PREDA1030.

    Inclusão de Terceiros: Se aplicável, produtos de terceiros também são inseridos neste processo, com seus respectivos preços.

    Finalidade: Gerar uma nova tabela de preços, com valores atualizados com base em regras de negócio e custos reais de produção.

Observações Gerais

Em ambos os fluxos, a operação segue um padrão de limpeza (deleção) e escrita (inserção), garantindo que a tabela de preços de destino seja sempre uma nova versão, sem misturar dados antigos com novos.

Essa rotina é fundamental para manter a tabela de preços atualizada para as operações de venda e precificação do ERP.

As regras de markup estão definidas e são buscadas em duas partes principais do código:

---

### 1. Na Query SQL da Função `fMarfil`

A regra geral de markup é obtida diretamente da tabela **`SBM200`** e é buscada na query SQL principal que a função `fMarfil` executa.

* **`BM_MARKUP AS MARKUP`**: Esta linha na query busca o valor do markup da tabela `SBM200`. O `SBM200` geralmente armazena informações de grupos de produtos.
* **`SBM.D_E_L_E_T_ = ' ' AND BM_GRUPO = B1_GRUPO`**: A query conecta a tabela `SBM200` (`SBM`) com a tabela de produtos `SB1030` (`B1`), buscando o markup que corresponde ao grupo de produto (`B1_GRUPO`).

Esse valor de markup é trazido para a memória e armazenado na variável `_nMark` para ser usado no cálculo.

---

### 2. Na Lógica de Exceção dentro da Função `fMarfil`

Existe uma regra específica para alguns grupos de produtos. Se o produto pertencer a um dos grupos `"10006L|10001L|10003L|10004L"` (ARTE, OURO, MASTER, FASHION), a regra de markup padrão é sobrescrita.

* **`If (cAlias)->BM_XSUBGRU $ ("10006L|10001L|10003L|10004L")`**: Esta condição verifica se o subgrupo do produto está na lista de exceções.
* **`buscMark := U_BuscaRegra(_cProd,(cAlias)->BM_XSUBGRU)`**: Se a condição for verdadeira, o código chama uma função auxiliar, `U_BuscaRegra`, para buscar um valor de markup especial.
* **`If buscMark <> 0 .And. buscMark <> NIL`**: Se a função `U_BuscaRegra` retornar um valor válido, ele **sobrescreve** o markup padrão, garantindo que a regra de exceção seja aplicada.

Em resumo, a regra de markup é, por padrão, buscada da tabela **`SBM200`**. No entanto, para grupos específicos, a função **`U_BuscaRegra`** é usada para encontrar e aplicar um markup diferente, priorizando essas exceções.
